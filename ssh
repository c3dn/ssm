#!/usr/bin/env bash
# ssm - Simple SSH Manager
# Config: ~/.ssm/hosts.db  (TSV: group<TAB>name<TAB>host<TAB>user)
# Features: add/edit/delete hosts, group filter on list, colored output, ping check,
#           SSH connect (no performance stats overlay).
# Shortcuts: a=add, e=edit, d=delete, c=connect, l=list

set -eo pipefail  # removed -u to prevent unbound variable errors

SSM_DIR="${HOME}/.ssm"
DB_FILE="${SSM_DIR}/hosts.db"

# -------------- Colors --------------
if command -v tput >/dev/null 2>&1; then
  bold="$(tput bold)"; reset="$(tput sgr0)"
  red="$(tput setaf 1)"; green="$(tput setaf 2)"; yellow="$(tput setaf 3)"
  blue="$(tput setaf 4)"; magenta="$(tput setaf 5)"; cyan="$(tput setaf 6)"
else
  bold=""; reset=""; red=""; green=""; yellow=""; blue=""; magenta=""; cyan=""
fi

usage() {
  cat <<EOF
${bold}ssm${reset} - Simple SSH Manager
Usage:
  ssm list [GROUP]
  ssm add
  ssm edit NAME
  ssm delete NAME
  ssm connect NAME

Shortcuts: a=add, e=edit, d=delete, c=connect, l=list
Config: ${DB_FILE}
EOF
}

ensure_db() {
  mkdir -p "${SSM_DIR}"
  if [[ ! -f "${DB_FILE}" ]]; then
    printf "# group\tname\thost\tuser\n" > "${DB_FILE}"
  fi
}

# Simple trim helper: strips leading/trailing whitespace from stdin
trim() { sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'; }

get_line_by_name() {
  local name="$1"
  awk -F'\t' -v n="$name" 'BEGIN{IGNORECASE=0} $0 !~ /^#/ && $2==n {print; exit}' "${DB_FILE}"
}

cmd_add() {
  ensure_db
  echo "${bold}Add a new host${reset}"
  read -rp "Group: " group
  read -rp "Name: " name
  if [[ -n "$(get_line_by_name "$name")" ]]; then
    echo "${red}Error:${reset} host named '${name}' exists." >&2
    exit 1
  fi
  read -rp "Host/IP: " host
  read -rp "User: " user

  group="$(printf "%s" "$group" | trim)"
  name="$(printf "%s" "$name" | trim)"
  host="$(printf "%s" "$host" | trim)"
  user="$(printf "%s" "$user" | trim)"

  if [[ -z "$group" || -z "$name" || -z "$host" || -z "$user" ]]; then
    echo "${red}Error:${reset} all fields required." >&2
    exit 1
  fi

  printf "%s\t%s\t%s\t%s\n" "$group" "$name" "$host" "$user" >> "${DB_FILE}"
  echo "${green}Added:${reset} $group / $name -> $user@$host"
}

cmd_edit() {
  ensure_db
  local name="${1:-}"
  [[ -z "$name" ]] && { echo "${red}Usage:${reset} ssm edit NAME"; exit 1; }

  local line; line="$(get_line_by_name "$name" || true)"
  if [[ -z "$line" ]]; then
    echo "${red}Not found:${reset} $name"
    exit 1
  fi

  IFS=$'\t' read -r group oldname host user <<< "$line"
  echo "${bold}Edit host${reset} (Enter = keep current)"
  read -rp "Group [${group}]: " ngroup
  read -rp "Name  [${oldname}]: " nname
  read -rp "Host  [${host}]: " nhost
  read -rp "User  [${user}]: " nuser

  ngroup="${ngroup:-$group}"
  nname="${nname:-$oldname}"
  nhost="${nhost:-$host}"
  nuser="${nuser:-$user}"

  awk -F'\t' -v n="$oldname" 'BEGIN{OFS="\t"} $0 ~ /^#/ {print; next} $2!=n {print}' "${DB_FILE}" > "${DB_FILE}.tmp"
  mv "${DB_FILE}.tmp" "${DB_FILE}"
  printf "%s\t%s\t%s\t%s\n" "$ngroup" "$nname" "$nhost" "$nuser" >> "${DB_FILE}"

  echo "${green}Updated:${reset} $ngroup / $nname -> $nuser@$nhost"
}

cmd_delete() {
  ensure_db
  local name="${1:-}"
  [[ -z "$name" ]] && { echo "${red}Usage:${reset} ssm delete NAME"; exit 1; }

  if [[ -z "$(get_line_by_name "$name")" ]]; then
    echo "${red}Not found:${reset} $name"
    exit 1
  fi

  # Confirmation prompt
  read -rp "Really delete '$name'? [y/N]: " _ans
  case "$_ans" in
    y|Y|yes|YES) ;;  # proceed
    *) echo "Aborted."; return 1;;
  esac

  awk -F'\t' -v n="$name" 'BEGIN{OFS="\t"} $0 ~ /^#/ {print; next} $2!=n {print}' "${DB_FILE}" > "${DB_FILE}.tmp"
  mv "${DB_FILE}.tmp" "${DB_FILE}"
  echo "${green}Deleted:${reset} $name"
}

ping_host() {
  local target="$1"
  if ping -c 1 -W 1 "$target" >/dev/null 2>&1; then
    printf "%s●%s" "$green" "$reset"
  else
    printf "%s●%s" "$red" "$reset"
  fi
}

cmd_list() {
  ensure_db
  local filter_group="${1:-}"
  printf "%sGroup            Name             Host                User    Ping%s\n" "$bold" "$reset"
  printf "%0.s-" {1..70}; echo
  awk -F'\t' -v fg="$filter_group" '
    $0 ~ /^#/ {next}
    { if (fg=="" || $1==fg) printf "%s\t%s\t%s\t%s\n", $1, $2, $3, $4 }
  ' "${DB_FILE}" | while IFS=$'\t' read -r group name host user; do
    local_ping="$(ping_host "$host")"
    printf "%-16s %-16s %-18s %-7s %b\n" "$group" "$name" "$host" "$user" "$local_ping"
  done
}

# -------------- Connect (inline info bar) --------------
cmd_connect() {
  ensure_db
  local name="${1:-}"
  if [[ -z "$name" || "$name" == "-h" || "$name" == "--help" ]]; then
    echo "Usage: ssm connect NAME"; return 1
  fi

  local line; line="$(get_line_by_name "$name" || true)"
  if [[ -z "$line" ]]; then
    echo "${red}Not found:${reset} $name"; return 1
  fi
  IFS=$'\t' read -r group _ host user <<< "$line"

  if ping -c 1 -W 1 "$host" >/dev/null 2>&1; then
    echo -e "${green}Host reachable${reset}: $user@$host"
  else
    echo -e "${yellow}Warning:${reset} ping failed. Attempting SSH..."
  fi

  ssh -tt "${user}@${host}"
}

main() {
  local cmd="${1:-}"  # protect against unset

  case "${cmd}" in
    a) cmd="add";; e) cmd="edit";; d) cmd="delete";; c) cmd="connect";; l) cmd="list";;
  esac
  case "${cmd}" in
    add) shift; cmd_add "$@";;
    edit) shift; cmd_edit "${1:-}";;
    delete) shift; cmd_delete "${1:-}";;
    connect) shift; cmd_connect "${1:-}";;
    list) shift; cmd_list "${1:-}";;
    ""|help|-h|--help) usage;;
    *) echo "${red}Unknown:${reset} ${cmd}"; usage; exit 1;;
  esac
}

main "$@"
